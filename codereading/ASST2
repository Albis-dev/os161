ASST2 Code Reading Questions

Section A. uio.c, loadelf.c, runprogram.c 

Q1. What are the ELF magic numbers?

A1. ELF magic is used to identify ELF files and is merely the very
    first few bytes of a file.
Ref : https://unix.stackexchange.com/questions/153352/what-is-elf-magic


Q2. What is the difference between UIO_USERISPACE and UIO_USERSPACE?
    When should one use UIO_SYSSPACE instead?

A2. UIO_USERISPACE == User process code
    UIO_USERSPACE  == User process data
    UIO_SYSSPACE   == Kernel
Ref : kern/include/uio.h

Q3. Why can the struct uio that is used to read in a segment be
    allocated on the stack in load_segment? Or, put another way,
    where does the memory read actually go?

A3. The uio struct contains a iovec, which wraps a buffer that is
    the destination of the memory read. The uio, however, also
    specifies the address space as that of the current thread,
    so the read happen into the user address space.
Ref : https://github.com/wyao/petrel-os/blob/master/design/asst2-design.md

Q4. In runprogram why is it important to call vfs_close before
    going to user mode?

A4. If kernel leaks memory... that would be a serious problem.

Q5. What function forces the processor to switch into user mode?
    Is this function machine dependent?

A5. mips_usermode() 
    * This should not be used by threads returning from traps - they
    * should just return from mips_trap(). It should be used by threads
    * entering user mode for the first time - whether the child thread in
    * a fork(), or into a brand-new address space after exec(), or when
    * starting the first userlevel program.
    *
    * It works by jumping into the exception return code.
    *
    * mips_usermode is common code for this. It cannot usefully be called
    * outside the mips port, but should be called from one of the
    * following places:
    *    - enter_new_process, for use by exec and equivalent.
    *    - enter_forked_process, in syscall.c, for use by fork.
Ref : kern/arch/mips/locore/trap.c

Q6. In what files are copyin, copyout, and memmove defined?
    Why are copyin and copyout necessary? (As opposed to just
    using memmove.)

A6. copyin() and copyout() have kernel/userspace protection. It will not
    allow to access kernel space when it's in usermode. memmove() just simply
    copies things.
Ref : common/libc/string/memmove.c, kern/vm/copyinout.c

Q7. What is the purpose of userptr_t?

A7. Indicates that the pointer is usermode-supplied.
Ref : kern/include/kern/iovec.h

